{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReverseField","setIsReverseField","visibleGoods","goods","preparedgoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","onClick","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,qBAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,eAETI,EAAa,YAAOD,GAqBxB,OAnBIL,EAAY,GACdM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAK,EACH,OAAOQ,EAAME,cAAcD,GAE7B,KAAK,EACH,OAAOD,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,IACFI,EAAgBA,EAAcM,WAGzBN,EAMcO,CAAiBhB,EACpC,CAAEG,YAAWE,mBAEf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMd,EAAa,IAC5Be,KAAK,SACLF,UAAWG,IACT,iBACA,CAAE,WAA0B,IAAdjB,IALlB,iCAWA,wBACEe,QAAS,kBAAMd,EAAa,IAC5Be,KAAK,SACLF,UAAWG,IACT,oBACA,CAAE,WAA0B,IAAdjB,IALlB,4BAWA,wBACEe,QAAS,kBACPZ,GAAmBD,IAErBc,KAAK,SACLF,UAAWG,IACT,oBACA,CAAE,YAAaf,IAPnB,wBAYIF,GAAaE,IAEf,wBACEa,QAAS,WACPd,EAAa,GACbE,GAAkB,IAEpBa,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGV,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAAoCA,GAApC,UAA2BA,aClHrCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.624f7f8a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  default = 0,\n  alphabet = 1,\n  length = 2,\n}\n\ninterface FilterParams {\n  sortField: SortType;\n  isReverseField: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReverseField }: FilterParams,\n) {\n  let preparedgoods = [...goods];\n\n  if (sortField > 0) {\n    preparedgoods.sort((good1, good2) => {\n      switch (sortField) {\n        case 1:\n          return good1.localeCompare(good2);\n\n        case 2:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverseField) {\n    preparedgoods = preparedgoods.reverse();\n  }\n\n  return preparedgoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(0);\n  const [isReverseField, setIsReverseField] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isReverseField });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(1)}\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortField !== 1 },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(2)}\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortField !== 2 },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => (\n            setIsReverseField(!isReverseField)\n          )}\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !isReverseField },\n          )}\n        >\n          Reverse\n        </button>\n        {(!!sortField || isReverseField)\n        && (\n          <button\n            onClick={() => {\n              setSortField(0);\n              setIsReverseField(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={`${good}`}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}